
# g++ warnings
#-Wall -Wextra -Wpedantic -Wshadow -Wconversion -Werror -Wundef
#-fsanitize=undefined,address -Wfloat-equal -Wformat-nonliteral
#-Wformat-security -Wformat-y2k -Wformat=2 -Wimport -Winvalid-pch
#-Wlogical-op -Wmissing-declarations -Wmissing-field-initializers
#-Wmissing-format-attribute -Wmissing-include-dirs -Wmissing-noreturn
#-Wnested-externs -Wpacked -Wpointer-arith -Wredundant-decls
#-Wstack-protector -Wstrict-null-sentinel -Wswitch-enum -Wwrite-strings

#CXXEXTRA=-Wall -Wextra -Wpedantic -Wconversion -Wshadow -Wno-sign-conversion -Wno-unused-parameter
#-Wno-unused-variable -Wno-unused-but-set-variable -Wno-missing-field-initializers -Wno-unknown-pragmas
#-Wno-comment -Werror -Wfatal-errors -fsanitize=address,undefined -fno-omit-frame-pointer -D_GLIBCXX_USE_CXX11_ABI=1

SHELL := bash
# .ONESHELL:
# .SHELLFLAGS := -eu -o pipefail -c
# .DELETE_ON_ERROR:
# MAKEFLAGS += --warn-undefined-variables
# MAKEFLAGS += --no-builtin-rules

# ifeq ($(origin .RECIPEPREFIX), undefined)
#   $(error This Make does not support .RECIPEPREFIX. Please use GNU Make 4.0 or later)
# endif
# .RECIPEPREFIX = >
# # Default - top level rule is what gets ran when you run just `make`
# build: out/image-id
# .PHONY: build

# Clean up the output directories; since all the sentinel files go under tmp, this will cause everything to get rebuilt
# clean:
# > rm -rf tmp
# > rm -rf out
# .PHONY: clean

TERMINAL = 0x1;
OPERATOR = 0x2;
OPERATION = 0x10;
BINARY = 0x4;
BINARY_OP = OPERATOR | BINARY;
UNARY_OP = OPERATIOR | UNARY;
MULTI_SIGN = ASTRIEK | BINARY_OP;
DEREFERENCE_OP = ASTRIEK || UNARY_OP;
MULTI_OPRATION = BINARY | OPERATION | MULTI_SIGN;

while( !strm.eof() )
    {
        unsigned int id;
        // strm.get(c);
        // if(isspace(c))
        // {
        //     if(!token.empty())
        //     {
        //         return 1;
        //     }
        //     continue;
        // }
        smach
        switch(id)
        {
            case '(':
                token += c;
                return ID_OPEN_PAREN;
            case '{':
                token += c;
                return ID_OPEN_BRACE;
            case '[':
                token += c;
                return ID_OPEN_BRACKET;
            case ';':
                token += c;
                return ID_SEMI_COLON;
            case '.':
                token += c;
                return ID_DOT;
            case ':':
            case '^':
                token += c;
                return ID_CARROT;
            case '*':
                token += c;
                return ID_ASTERIK;
            case '+':
                token += c;
                return ID_PLUS;
            case '=':
                token += c;
                return ID_EQUAL;
            case '>':
                token += c;
                return ID_GREATER_THAN;
            case '&':
                token += c;
                return ID_AMPERSAND;
            case ')':
                token += c;
                return ID_CLOSE_PAREN;
            case '}':
                token += c;
                return ID_CLOSE_BRACE;
            case ']':
                token += c;
                return ID_CLOSE_BRACKET;
            case ',':
                token += c;
                return ID_COMMA;
            case '?':
                token += c;
                return ID_QUESTION_MARK;
            case '~':
                token += c;
                return ID_TILDE;
            case '%':
                token += c;
                return ID_PERCENT;
            case '/':
                token += c;
                return ID_FORWARD_SLASH;
            case '-':
                token += c;
                return ID_MINUS;
            case '<':
                token += c;
                return ID_LESS_THAN;
            case '!':
                token += c;
                return ID_LOGICAL_NOT;
            case '|':
                token += c;
                return ID_LOGICAL_OR;

            default:
            {
                if ( isalnum( c ) || c == '_' )
                {
                    continue;
                    }
                else
                    {
                    if ( !token.empty( ) )
                        {
                        return 1;
                        }
                    token += c;
                    return 1;
                    }
                break;
            }
        }
        }
    return ID_UNDEFINED;
